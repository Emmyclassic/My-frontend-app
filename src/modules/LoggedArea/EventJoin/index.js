import React, { useState } from "react";
import { MdKeyboardArrowLeft } from "react-icons/md";
import { useHistory } from "react-router";
import { fetchEventByCode } from "../../../api/eventHandler";
import CustomButton from "../../../components/Buttons/Button";
import CustomInput from "../../../components/FormFields/Input/Input";
import MeetingInput from "../../../components/MeetingInput/MeetingInput";
import PrivateGenericLayout from "../../../components/PrivateGenericLayout/PrivateGenericLayout";
import style from "./index.module.scss";

const EventJoin = () => {
  const history = useHistory();
  const [meetingCode, setMeetingCode] = useState();
  const [loading, setLoading] = useState(false);
  const [codeError, setCodeError] = useState();

  const validateEventHandler = async () => {
    if (meetingCode) {
      setCodeError();
      try {
        setLoading(true);
        const {
          data: { data },
        } = await fetchEventByCode(meetingCode);
        setLoading(true);
        if (data) {
          history.push(`/event/concert/overview/${data.id}`);
        }
      } catch (err) {
        setLoading(false);
        setCodeError("Invalid meeting code");
      }
    } else {
      setCodeError("Meeting Code is required");
    }
  };

  return (
    <PrivateGenericLayout
      leftNav={
        <span
          className={style.containerNav_iconBox}
          onClick={() => history.goBack()}
        >
          <MdKeyboardArrowLeft size={20} />
        </span>
      }
    >
      <section className={style.main}>
        <div className={style.container}>
          <div className={style.blur_block_green}></div>
          <h4 className={style.containerHeader}>
            Enter Event Code to Join Event
          </h4>
          <p className={style.containerPara}>
            Enter the meeting code generated by the host to join this meeting.
          </p>

          <div className={style.eventInput}>
            <MeetingInput customStyle={[style.meetingWrapper]}>
              <CustomInput
                placeHolder="Enter meeting code"
                onChange={(e) => setMeetingCode(e.target.value)}
                customStyle={[style.download_meeting]}
                value={meetingCode}
              />
              <CustomButton handleClick={() => validateEventHandler()}>
                <span className={style.meeting__btn__text}>
                  {loading ? "Loading..." : "Join Event"}
                </span>
              </CustomButton>
            </MeetingInput>
          </div>
          {codeError && (
            <span className={style.validate_error}> {codeError}</span>
          )}
        </div>
      </section>
    </PrivateGenericLayout>
  );
};

export default EventJoin;
